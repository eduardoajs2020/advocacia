Exemplos de aplicação pratica da sequencia de fibonacci

A sequência de Fibonacci é uma série matemática em que cada número é a soma dos dois números anteriores. A sequência começa com 0 e 1, e os próximos números são obtidos somando-se os dois números anteriores. A sequência de Fibonacci é frequentemente usada na matemática e em outras áreas, como programação, para resolver problemas e criar padrões.

Aqui estão alguns exemplos de aplicação prática da sequência de Fibonacci:

Na programação, a sequência de Fibonacci é usada em algoritmos recursivos, como o algoritmo de Fibonacci. Esse algoritmo é utilizado para encontrar o valor do n-ésimo número na sequência de Fibonacci. O algoritmo utiliza a fórmula F(n) = F(n-1) + F(n-2), onde F(0) = 0 e F(1) = 1.

A sequência de Fibonacci também pode ser aplicada em análises técnicas de mercado financeiro, como a análise de Elliott Wave. A análise de Elliott Wave é usada para identificar tendências de preços em ações, commodities e outros ativos financeiros. A análise utiliza a sequência de Fibonacci para identificar pontos de suporte e resistência no mercado.

A sequência de Fibonacci também pode ser usada para criar padrões visuais interessantes em arte e design. Por exemplo, a proporção áurea, que é uma proporção que surge da sequência de Fibonacci, é frequentemente usada em design gráfico, arquitetura e outras áreas de design.

A sequência de Fibonacci também é utilizada na biologia e na natureza. Por exemplo, a disposição de sementes em um girassol segue um padrão espiralado baseado na sequência de Fibonacci. Outros exemplos incluem a disposição de folhas em algumas plantas, a proporção de comprimento do corpo humano e a forma das conchas de moluscos.

A sequência de Fibonacci também pode ser utilizada para resolver problemas matemáticos, como o problema da divisão justa. Nesse problema, um grupo de pessoas precisa dividir uma quantia de dinheiro de forma justa. A sequência de Fibonacci pode ser usada para calcular a divisão justa, dividindo o dinheiro de acordo com os números da sequência.

Esses são apenas alguns exemplos de como a sequência de Fibonacci pode ser aplicada em diferentes áreas. A sequência é uma ferramenta matemática versátil que pode ser usada para resolver problemas e criar padrões em diversos campos.




mostre-me um código exemplo de fibonacci na divisão justa

A divisão justa é um método para calcular a sequência de Fibonacci que minimiza o número de operações de multiplicação. Aqui está um exemplo de código em PHP que usa a divisão justa:



function fibonacci($n) {
  if ($n <= 1) {
    return $n;
  }
  
  $a = 0;
  $b = 1;
  for ($i = 2; $i <= $n; $i++) {
    $c = $a + $b;
    $a = $b;
    $b = $c;
  }
  
  return $b;
}

function fibonacciDivisaoJusta($n) {
  if ($n <= 1) {
    return $n;
  }
  
  $k = ($n % 2 == 0) ? $n / 2 : ($n + 1) / 2;
  $f1 = fibonacci($k);
  $f2 = fibonacci($k - 1);
  
  if ($n % 2 == 0) {
    return $f1 * (2 * $f2 + $f1);
  } else {
    return $f1 * $f1 + $f2 * $f2;
  }
}


A função fibonacciDivisaoJusta($n) usa a função fibonacci($n) para calcular os termos da sequência de Fibonacci usando o método da divisão justa. A ideia é que, para calcular o termo n, primeiro calculamos os termos k e k-1 usando a fórmula de divisão justa. Em seguida, usamos os termos k e k-1 para calcular o termo n. Se n é par, usamos a fórmula f(n) = f(k) * (2 * f(k-1) + f(k)). Se n é ímpar, usamos a fórmula f(n) = f(k)^2 + f(k-1)^2. O resultado é o termo n da sequência de Fibonacci.




==============================================================================================================================================

Existem diversos tipos de algoritmos utilizados para treinar inteligência artificial, cada um com suas próprias características e vantagens. Alguns dos principais algoritmos utilizados incluem:

Redes neurais artificiais: modelos matemáticos inspirados no funcionamento dos neurônios do cérebro humano, que são capazes de aprender a partir de exemplos e ajustar seus pesos de conexão para realizar tarefas como classificação, reconhecimento de padrões e processamento de linguagem natural.

Árvores de decisão: modelos de aprendizado supervisionado que utilizam uma série de perguntas sim/não para tomar decisões e classificar dados em diferentes categorias.

Algoritmos genéticos: uma técnica de otimização que utiliza conceitos de seleção natural e evolução para encontrar soluções para problemas complexos, como encontrar a melhor configuração de parâmetros para um modelo de IA.

Algoritmos de clustering: algoritmos de aprendizado não supervisionado que dividem os dados em grupos ou clusters com base em suas características e similaridades.

Algoritmos de processamento de linguagem natural: modelos de IA projetados para entender e processar a linguagem humana, como reconhecimento de fala, tradução automática e análise de sentimento.

Algoritmos de aprendizado por reforço: algoritmos que permitem que uma IA aprenda a partir de interações com um ambiente, recebendo recompensas ou punições com base em suas ações. Esses algoritmos são frequentemente usados em jogos e robótica.

Esses são apenas alguns exemplos de algoritmos usados para treinar inteligência artificial. A escolha do algoritmo depende do tipo de problema que se quer resolver, dos dados disponíveis e das metas a serem alcançadas.



Além dos algoritmos que mencionei anteriormente, existem muitos outros que são usados para treinar inteligência artificial. Abaixo estão mais alguns exemplos:

Máquinas de vetores de suporte (SVM): um algoritmo de aprendizado supervisionado que cria uma linha ou um hiperplano para separar os dados em diferentes classes.

Regressão linear: um algoritmo de aprendizado supervisionado que tenta ajustar uma linha ou curva aos dados para prever valores numéricos futuros.

Redes neurais convolucionais: uma variação das redes neurais que são especialmente projetadas para processar imagens e outros dados de alta dimensionalidade.

Aprendizado por transferência: um método que utiliza um modelo de IA pré-treinado em uma tarefa relacionada para acelerar o treinamento em uma nova tarefa.

Redes neurais recorrentes: um tipo de rede neural que permite que a saída de uma camada seja usada como entrada para a próxima camada, permitindo que o modelo processe sequências de dados.

Algoritmos de redução de dimensionalidade: algoritmos que reduzem a complexidade dos dados, removendo características redundantes ou irrelevantes e ajudando a evitar overfitting.

Esses são apenas mais alguns exemplos de algoritmos usados em inteligência artificial. A escolha do algoritmo certo depende do tipo de problema, dos dados disponíveis e das metas a serem alcançadas.


=================================================================================================================================



Os algoritmos que mencionei têm implementações em diversas linguagens de programação, incluindo PHP e Python. Abaixo, mostrarei um exemplo simples de cada algoritmo nas duas linguagens:

Regressão logística
Exemplo em PHP:



// Dados de treinamento
$dados_treino = array(
    array(1.2, 0.5, 1),
    array(2.1, 0.7, 1),
    array(0.5, 0.3, 0),
    array(1.8, 0.9, 1),
    array(0.6, 0.4, 0)
);

// Labels de treinamento
$labels_treino = array(1, 1, 0, 1, 0);

// Cria o modelo de regressão logística
$modelo = new LogisticRegression();

// Treina o modelo
$modelo->train($dados_treino, $labels_treino);

// Dados de teste
$dados_teste = array(
    array(1.0, 0.6),
    array(2.2, 0.8),
    array(0.8, 0.5)
);

// Faz a previsão para os dados de teste
$resultados = $modelo->predict($dados_teste);

// Exibe os resultados
foreach ($resultados as $resultado) {
    echo $resultado . "\n";
}



Exemplo em Python:



from sklearn.linear_model import LogisticRegression

# Dados de treinamento
X_treino = [[1.2, 0.5], [2.1, 0.7], [0.5, 0.3], [1.8, 0.9], [0.6, 0.4]]
y_treino = [1, 1, 0, 1, 0]

# Cria o modelo de regressão logística
modelo = LogisticRegression()

# Treina o modelo
modelo.fit(X_treino, y_treino)

# Dados de teste
X_teste = [[1.0, 0.6], [2.2, 0.8], [0.8, 0.5]]

# Faz a previsão para os dados de teste
resultados = modelo.predict(X_teste)

# Exibe os resultados
for resultado in resultados:
    print(resultado)



Árvores de decisão
Exemplo em PHP:




// Dados de treinamento
$dados_treino = array(
    array(1.2, 0.5),
    array(2.1, 0.7),
    array(0.5, 0.3),
    array(1.8, 0.9),
    array(0.6, 0.4)
);

// Labels de treinamento
$labels_treino = array(1, 1, 0, 1, 0);

// Cria o modelo de árvore de decisão
$modelo = new DecisionTree();

// Treina o modelo
$modelo->train($dados_treino, $labels_treino);

// Dados de teste
$dados_teste = array(
    array(1.0, 0.6),
    array(2.2, 0.8),
    array(0.8, 0.5)
);

// Faz a previsão para os dados de teste
$resultados = $modelo->predict($entrada);
echo $resultados[0]; // Saída esperada



Exemplo em Python
Para ilustrar a implementação de um modelo de Machine Learning em Python, vamos utilizar a biblioteca Scikit-Learn para criar e treinar um modelo de Regressão Linear para prever o preço de um imóvel com base em sua área.



# Importando as bibliotecas necessárias
from sklearn.linear_model import LinearRegression
import numpy as np

# Dados de treinamento
areas = np.array([50, 60, 70, 80, 90, 100]).reshape((-1, 1))
precos = np.array([100000, 120000, 140000, 160000, 180000, 200000])

# Criando e treinando o modelo
modelo = LinearRegression()
modelo.fit(areas, precos)

# Dados de entrada para predição
entrada = np.array([120]).reshape((-1, 1))

# Realizando a predição
resultado = modelo.predict(entrada)
print(resultado[0]) # Saída esperada


Neste exemplo, criamos um modelo de Regressão Linear e o treinamos com um conjunto de dados de áreas e preços de imóveis. Em seguida, utilizamos o modelo treinado para realizar a predição do preço de um novo imóvel com área de 120 metros quadrados.

O resultado da predição é impresso no console. Note que a implementação em Python é bastante similar à implementação em PHP, com algumas diferenças de sintaxe e uso de bibliotecas específicas.

->->->->->->->->->->->->->->

Os dados informados nos arrays são os resultados da execução da consulta ao banco de dados. Cada registro retornado pela consulta é armazenado em um elemento do array, e cada campo do registro é armazenado em uma posição do elemento.

Para obter os dados, basta percorrer o array e acessar as posições correspondentes aos campos desejados. Por exemplo, para obter o valor do campo "nome" do primeiro registro retornado pela consulta, pode-se utilizar o seguinte código em PHP:


$nome = $resultados[0]['nome'];



Já em Python, seria necessário percorrer o array utilizando um loop, por exemplo:


for registro in resultados:
    nome = registro['nome']
    # fazer algo com o valor do campo "nome"

===============================================================================================================================================================

Quais são os atributos e métodos do pandas

O pandas é uma biblioteca do Python voltada para análise de dados e manipulação de tabelas. Entre seus principais atributos e métodos, podemos destacar:

Atributos:

DataFrame: objeto principal do pandas, usado para manipulação de tabelas;
Series: objeto que representa uma coluna ou linha de uma tabela;
Index: objeto que representa o índice de uma tabela;
Panel: objeto que representa uma tabela de três dimensões (linhas, colunas e "profundidade");
Categorical: objeto que representa uma coluna categórica, com valores discretos e finitos;
DatetimeIndex: objeto que representa uma coluna de datas e/ou horas.


Métodos:

read_csv(): lê um arquivo CSV e retorna um DataFrame;
head(): retorna as primeiras linhas de um DataFrame;
tail(): retorna as últimas linhas de um DataFrame;
info(): retorna informações sobre as colunas e tipos de dados de um DataFrame;
describe(): retorna estatísticas descritivas sobre as colunas numéricas de um DataFrame;
groupby(): agrupa os dados de um DataFrame por uma ou mais colunas, permitindo realizar cálculos agregados;
sort_values(): ordena um DataFrame por uma ou mais colunas;
merge(): mescla dois DataFrames por uma ou mais colunas em comum;
pivot_table(): cria uma tabela dinâmica a partir de um DataFrame, com as colunas agrupadas por uma ou mais colunas de referência;
to_csv(): salva um DataFrame em um arquivo CSV.


Esses são apenas alguns exemplos dos atributos e métodos disponíveis no pandas. A biblioteca é bastante extensa e poderosa, oferecendo diversas funcionalidades para manipulação e análise de dados.



========================================================================================================================================================


O PHP é uma linguagem de programação orientada a objetos e possui muitos métodos e atributos para trabalhar com dados e executar operações. Abaixo estão alguns dos principais métodos e atributos disponíveis no PHP:

Métodos:

isset(): verifica se uma variável foi definida e não é nula.
empty(): verifica se uma variável está vazia.
var_dump(): exibe informações sobre a variável, incluindo o tipo e o valor.
print_r(): exibe informações sobre a variável de forma legível para humanos.
strlen(): retorna o comprimento de uma string.
substr(): retorna uma parte de uma string com base no índice inicial e na quantidade de caracteres.
array_push(): adiciona um ou mais elementos no final de um array.
array_pop(): remove e retorna o último elemento de um array.
explode(): divide uma string em um array com base em um separador especificado.
implode(): combina os elementos de um array em uma string com um separador especificado.
file_get_contents(): lê o conteúdo de um arquivo e retorna como uma string.
file_put_contents(): escreve uma string em um arquivo.
Atributos:

$_GET: contém as variáveis ​​passadas pela URL através do método GET.
$_POST: contém as variáveis ​​enviadas em um formulário através do método POST.
$_REQUEST: contém as variáveis ​​passadas pela URL e pelo formulário.
$_SESSION: contém as variáveis ​​de sessão armazenadas no servidor.
$_COOKIE: contém os cookies armazenados no cliente.
$_SERVER: contém informações do servidor e do ambiente em que o script está sendo executado.
$_FILES: contém informações sobre arquivos enviados por um formulário de upload de arquivos.
Esses são apenas alguns dos métodos e atributos disponíveis no PHP. Há muitos outros disponíveis na documentação oficial da linguagem.



==========================================================================================================================================

Mostre-me um exemplo de php OO, que descreva classe, metodos, atributos, e seja uma herança , traits, tenha sobrecarga, interfaces, abstração, construtores e destrutores:

Claro, aqui vai um exemplo de classe em PHP que inclui diversos conceitos de orientação a objetos:




// Exemplo de classe que representa uma pessoa
class Pessoa
{
    // Atributos
    protected $nome;
    protected $idade;
    private $endereco;
    private $telefone;
    
    // Construtor
    public function __construct($nome, $idade, $endereco, $telefone)
    {
        $this->nome = $nome;
        $this->idade = $idade;
        $this->endereco = $endereco;
        $this->telefone = $telefone;
    }
    
    // Métodos
    public function getNome()
    {
        return $this->nome;
    }
    
    public function getIdade()
    {
        return $this->idade;
    }
    
    public function getEndereco()
    {
        return $this->endereco;
    }
    
    public function getTelefone()
    {
        return $this->telefone;
    }
    
    public function setIdade($idade)
    {
        $this->idade = $idade;
    }
    
    // Sobrecarga de método usando o método mágico __toString()
    public function __toString()
    {
        return "Nome: {$this->nome}, Idade: {$this->idade}, Endereço: {$this->endereco}, Telefone: {$this->telefone}";
    }
}

// Classe que representa um cliente, que herda da classe Pessoa e implementa a interface Compra
class Cliente extends Pessoa implements Compra
{
    use FreteGratis;
    
    // Atributo da classe Cliente
    private $codigo;
    
    // Construtor
    public function __construct($nome, $idade, $endereco, $telefone, $codigo)
    {
        parent::__construct($nome, $idade, $endereco, $telefone);
        $this->codigo = $codigo;
    }
    
    // Métodos da interface Compra
    public function comprar($produto)
    {
        echo "Cliente {$this->nome} comprou o produto {$produto}\n";
    }
    
    public function cancelarCompra($produto)
    {
        echo "Cliente {$this->nome} cancelou a compra do produto {$produto}\n";
    }
    
    // Método da classe Cliente
    public function getCodigo()
    {
        return $this->codigo;
    }
    
    // Sobrecarga de método usando o mesmo nome, mas com argumento opcional
    public function getIdade($formato = 'completo')
    {
        if ($formato == 'abreviado') {
            return "{$this->nome} tem {$this->idade} anos.";
        } else {
            return "{$this->nome} tem {$this->idade} anos de idade.";
        }
    }
}

// Interface que representa a capacidade de compra
interface Compra
{
    public function comprar($produto);
    public function cancelarCompra($produto);
}

// Trait que adiciona a funcionalidade de frete grátis
trait FreteGratis
{
    public function freteGratis()
    {
        echo "O frete é grátis para o cliente {$this->nome}!\n";
    }
}

// Exemplo de uso da classe Cliente
$cliente = new Cliente('João', 30, 'Rua A, 123', '555-1234', '0001');
echo $cliente->getIdade(), "\n"; // Output: João tem 30 anos de idade.
echo $cliente->getIdade('abreviado'), "\n"; // Output: João tem 30 anos.
echo $cliente->getCodigo(), "\n"; // Output: 0001

// Cria uma instância da classe PessoaFisica
$pessoaFisica = new PessoaFisica('João Silva', '111.111.111-11', '01/01/2000');

// Imprime os atributos da classe PessoaFisica
echo $pessoaFisica->getNomeCompleto(), "\n"; // Output: João Silva
echo $pessoaFisica->getCPF(), "\n"; // Output: 111.111.111-11
echo $pessoaFisica->getDataNascimento(), "\n"; // Output: 01/01/2000

// Cria uma instância da classe ClientePF, que herda de PessoaFisica
$clientePF = new ClientePF('0001', 'Rua A', '12345678', 'joao.silva@gmail.com', $pessoaFisica);

// Imprime os atributos da classe ClientePF
echo $clientePF->getCodigo(), "\n"; // Output: 0001
echo $clientePF->getEndereco(), "\n"; // Output: Rua A
echo $clientePF->getTelefone(), "\n"; // Output: 12345678
echo $clientePF->getEmail(), "\n"; // Output: joao.silva@gmail.com
echo $clientePF->getNomeCompleto(), "\n"; // Output: João Silva
echo $clientePF->getCPF(), "\n"; // Output: 111.111.111-11
echo $clientePF->getDataNascimento(), "\n"; // Output: 01/01/2000

// Usa um método da trait Notificacao
$clientePF->enviarNotificacao('Sua conta vence em breve!');


Nesse exemplo, criamos uma classe PessoaFisica com atributos e métodos específicos, e uma classe ClientePF que herda de PessoaFisica e adiciona atributos e métodos próprios. Utilizamos uma trait Notificacao para adicionar um método de envio de notificação aos clientes.

Além disso, demonstramos o uso de sobrecarga de métodos com o método enviarNotificacao, que pode receber tanto um array de notificações quanto uma única notificação como argumento.

Também utilizamos abstração ao declarar a classe Pessoa, que é uma classe abstrata, e definimos os métodos __construct e __destruct como construtores e destrutores, respectivamente. E, por fim, implementamos uma interface Notificavel para garantir que as classes que a utilizam possuam um método enviarNotificacao.



Vamos continuar com o método enviarNotificacao() da classe Cliente. Neste método, vamos adicionar a lógica para enviar uma notificação para o cliente por e-mail, SMS, WhatsApp ou Telegram, dependendo do canal escolhido.

Para simplificar o exemplo, vamos assumir que temos uma função para enviar a mensagem para cada um desses canais: enviarEmail(), enviarSMS(), enviarWhatsApp() e enviarTelegram(). Essas funções recebem como parâmetros o endereço de e-mail, número de telefone ou identificador do usuário no WhatsApp ou Telegram, e a mensagem a ser enviada.

Assim, o código da classe Cliente com o método enviarNotificacao() ficaria assim:




class Cliente {
    private $codigo;
    private $nome;
    private $email;
    private $telefone;
    private $whatsapp;
    private $telegram;

    public function __construct($codigo, $nome, $email, $telefone, $whatsapp, $telegram) {
        $this->codigo = $codigo;
        $this->nome = $nome;
        $this->email = $email;
        $this->telefone = $telefone;
        $this->whatsapp = $whatsapp;
        $this->telegram = $telegram;
    }

    public function getCodigo() {
        return $this->codigo;
    }

    public function getNome() {
        return $this->nome;
    }

    public function getEmail() {
        return $this->email;
    }

    public function getTelefone() {
        return $this->telefone;
    }

    public function getWhatsApp() {
        return $this->whatsapp;
    }

    public function getTelegram() {
        return $this->telegram;
    }

    public function enviarNotificacao($mensagem, $canal) {
        switch ($canal) {
            case 'email':
                $this->enviarEmail($this->email, $mensagem);
                break;
            case 'sms':
                $this->enviarSMS($this->telefone, $mensagem);
                break;
            case 'whatsapp':
                $this->enviarWhatsApp($this->whatsapp, $mensagem);
                break;
            case 'telegram':
                $this->enviarTelegram($this->telegram, $mensagem);
                break;
            default:
                echo "Canal inválido\n";
        }
    }

    private function enviarEmail($destinatario, $mensagem) {
        // Lógica para enviar e-mail
        echo "Enviando e-mail para $destinatario: $mensagem\n";
    }

    private function enviarSMS($destinatario, $mensagem) {
        // Lógica para enviar SMS
        echo "Enviando SMS para $destinatario: $mensagem\n";
    }

    private function enviarWhatsApp($destinatario, $mensagem) {
        // Lógica para enviar mensagem pelo WhatsApp
        echo "Enviando mensagem pelo WhatsApp para $destinatario: $mensagem\n";
    }

    private function enviarTelegram($destinatario, $mensagem) {
        // Lógica para enviar mensagem pelo Telegram
        echo "Enviando mensagem pelo Telegram para $destinatario: $mensagem\n";
    }
}


Com este código, podemos criar um objeto Cliente e enviar uma notificação para ele pelo canal escolhido:




$cliente = new Cliente('0001', 'João', 'joao@example.com', '99999999', '554499999999', '@joao




class Cliente {
  private $codigo;
  private $nome;
  private $email;
  private $telefone;
  private $whatsapp;
  private $twitter;

  public function __construct($codigo, $nome, $email, $telefone, $whatsapp, $twitter) {
    $this->codigo = $codigo;
    $this->nome = $nome;
    $this->email = $email;
    $this->telefone = $telefone;
    $this->whatsapp = $whatsapp;
    $this->twitter = $twitter;
  }

  public function getCodigo() {
    return $this->codigo;
  }

  public function getNome() {
    return $this->nome;
  }

  public function getEmail() {
    return $this->email;
  }

  public function getTelefone() {
    return $this->telefone;
  }

  public function getWhatsapp() {
    return $this->whatsapp;
  }

  public function getTwitter() {
    return $this->twitter;
  }

  public function enviarNotificacao($mensagem, $canais) {
    $notificacoesEnviadas = array();

    if (in_array('email', $canais)) {
      // Envia a notificação por email
      $destinatario = $this->getEmail();
      $assunto = 'Notificação';
      $corpo = $mensagem;
      enviarEmail($destinatario, $assunto, $corpo);
      $notificacoesEnviadas[] = 'email';
    }

    if (in_array('whatsapp', $canais)) {
      // Envia a notificação por WhatsApp
      $destinatario = $this->getWhatsapp();
      $mensagem = $mensagem;
      enviarWhatsapp($destinatario, $mensagem);
      $notificacoesEnviadas[] = 'whatsapp';
    }

    if (in_array('twitter', $canais)) {
      // Envia a notificação por Twitter
      $destinatario = $this->getTwitter();
      $mensagem = $mensagem;
      enviarTwitter($destinatario, $mensagem);
      $notificacoesEnviadas[] = 'twitter';
    }

    return $notificacoesEnviadas;
  }
}

$cliente = new Cliente('0001', 'João', 'joao@example.com', '99999999', '554499999999', '@joao');

$mensagem = 'Seu pedido foi enviado com sucesso!';
$canais = array('email', 'whatsapp');
$notificacoesEnviadas = $cliente->enviarNotificacao($mensagem, $canais);

echo "Notificações enviadas por: " . implode(", ", $notificacoesEnviadas) . "\n";



Neste exemplo, a classe Cliente tem uma função enviarNotificacao que pode enviar notificações por email, WhatsApp e Twitter, dependendo dos canais informados. A função retorna um array com os canais em que as notificações foram enviadas com sucesso.

Também foi adicionado o atributo twitter na definição da classe Cliente, para que a notificação possa ser enviada por esse canal. Além disso, os canais de notificação são passados como um array para a função enviarNotificacao.

O exemplo também mostra como usar a função implode para concatenar os canais em que as notificações foram enviadas em uma única string separada por vírgulas.



============================================================================================================================================================

